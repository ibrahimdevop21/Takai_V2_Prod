---
import { Icon } from 'astro-icon/components';
import LogoLight from '~/components/common/LogoLight.astro';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  links?: Array<{
    text?: string;
    href?: string;
    ariaLabel?: string;
    icon?: string;
  }>;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id,
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class="fixed top-0 left-0 right-0 z-50 bg-gradient-to-r from-[#0a1930]/95 to-[#0e2345]/95 backdrop-blur-md border-b border-[#bf1e2e] shadow-[0_2px_10px_#bf1e2e33] transition-all duration-300"
  id="main-header"
>
  
  <nav class="max-w-7xl mx-auto flex items-center justify-between px-6 py-3 md:py-4">
    
    <!-- Logo -->
    <a href="/" class="flex items-center gap-2 flex-shrink-0">
      <div id="logo-container" class="transition-all duration-300">
        <LogoLight />
      </div>
    </a>

    <!-- Desktop Menu -->
    <ul class="hidden md:flex items-center gap-8 text-white/85 text-sm font-medium">
      {
        links.map(({ text, href }) => {
          const isActive = currentPath === href;
          return (
            <li>
              <a 
                href={href} 
                class={`nav-link text-white/85 hover:text-white transition-all duration-300 relative pb-1 ${isActive ? 'text-white border-b-2 border-[#bf1e2e]' : ''}`}
              >
                {text}
              </a>
            </li>
          );
        })
      }
    </ul>

    <!-- Desktop CTA -->
    <div class="hidden md:block flex-shrink-0">
      {
        actions?.length ? (
          actions.map((btnProps) => (
            <a
              href={btnProps.href}
              class="bg-takai-gold hover:bg-takai-gold/90 text-black px-6 py-2.5 rounded-full font-semibold transition-all duration-300 shadow-md hover:shadow-lg text-sm"
            >
              {btnProps.text}
            </a>
          ))
        ) : null
      }
    </div>

    <!-- Elegant Mobile Menu Button -->
    <button 
      id="mobile-menu-button"
      class="mobile-menu-button md:hidden relative z-50 p-2 focus:outline-none transition-all duration-300"
      aria-label="Toggle mobile navigation menu"
      aria-expanded="false"
      aria-controls="mobile-navigation"
    >
      <div class="hamburger-container w-6 h-6 flex flex-col justify-center items-center space-y-1">
        <span class="hamburger-line block w-6 h-0.5 bg-gray-100 transition-all duration-300 ease-in-out"></span>
        <span class="hamburger-line block w-6 h-0.5 bg-gray-100 transition-all duration-300 ease-in-out"></span>
        <span class="hamburger-line block w-6 h-0.5 bg-gray-100 transition-all duration-300 ease-in-out"></span>
      </div>
    </button>
  </nav>

  <!-- Japanese Luxury Mobile Navigation Dropdown -->
  <nav 
    id="mobile-navigation" 
    class="mobile-nav fixed top-0 left-0 right-0 bg-[#0A0A1A] max-h-0 overflow-hidden transition-all duration-400 ease-in-out z-40 md:hidden"
    role="navigation"
    aria-label="Mobile navigation menu"
    aria-hidden="true"
  >
    <!-- Navigation Header -->
    <div class="flex items-center justify-end px-6 py-4 border-b border-[#C9A227]/20">
      <button 
        id="mobile-menu-close"
        class="p-2 hover:bg-[#C9A227]/10 focus:outline-none focus:ring-2 focus:ring-[#C9A227] rounded-md transition-colors duration-200"
        aria-label="Close mobile navigation"
      >
        <svg class="w-6 h-6 text-[#C9A227]" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Elegant Navigation Links -->
    <div class="px-6 py-8">
      {
        links.map(({ text, href }, index) => {
          const isActive = currentPath === href;
          return (
            <div class="text-center">
              <a 
                href={href} 
                class={`mobile-nav-link block text-lg tracking-wide transition-all duration-300 py-4 hover:text-[#C9A227] ${
                  isActive 
                    ? 'text-[#C9A227]' 
                    : 'text-gray-100'
                }`}
                style={`animation-delay: ${index * 50}ms`}
                role="menuitem"
              >
                {text}
              </a>
              {index < links.length - 1 && (
                <div class="h-px bg-gradient-to-r from-transparent via-[#C9A227]/30 to-transparent mx-8 mt-2"></div>
              )}
            </div>
          );
        })
      }
      
      <!-- Action Button -->
      {
        actions?.length ? (
          <div class="pt-6 mt-6 border-t border-[#C9A227]/20">
            {actions.map((btnProps) => (
              <a
                href={btnProps.href}
                class="mobile-nav-link block w-full text-center px-6 py-3 bg-[#C9A227] hover:bg-[#C9A227]/90 text-black font-medium rounded-lg hover:shadow-lg hover:scale-[1.02] transition-all duration-300 tracking-wide"
                role="menuitem"
              >
                {btnProps.text}
              </a>
            ))}
          </div>
        ) : null
      }
    </div>
  </nav>
</header>

<style>
  /* Enhanced navbar with stable background and logo scaling */
  header {
    background: linear-gradient(to right, rgba(10, 25, 48, 0.95), rgba(14, 35, 69, 0.95));
  }
  
  header.scrolled {
    background: linear-gradient(to right, rgba(10, 25, 48, 0.98), rgba(14, 35, 69, 0.98));
    box-shadow: 0 4px 20px rgba(191, 30, 46, 0.4);
  }
  
  #logo-container {
    transform: scale(1);
    transition: transform 0.3s ease-in-out;
  }
  
  header.scrolled #logo-container {
    transform: scale(0.85);
  }

  /* Navigation link hover effects */
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #bf1e2e;
    transition: width 0.3s ease;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  /* CSS-Only Mobile Navigation - 100% Reliable */
  .mobile-menu-toggle {
    display: none;
  }

  .mobile-menu {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .mobile-nav.open {
    max-height: 100vh;
  }

  /* Elegant Hamburger Animation */
  .mobile-menu-button.open .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-menu-button.open .hamburger-line:nth-child(2) {
    opacity: 0;
    transform: scale(0);
  }

  .mobile-menu-button.open .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(5px, -5px);
  }

  /* Staggered Link Animation */
  .mobile-nav.open .mobile-nav-link {
    animation: fadeInUp 0.4s ease-out forwards;
    opacity: 0;
    transform: translateY(10px);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Japanese Typography & Hover Effects */
  .mobile-nav-link {
    font-family: 'Inter', 'Noto Sans JP', sans-serif;
    position: relative;
  }

  .mobile-nav-link:hover {
    transform: scale(1.05);
  }

  /* Elegant Focus States */
  .mobile-menu-button:focus,
  .mobile-nav-link:focus {
    outline: 2px solid #C9A227;
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* Smooth scrolling for mobile navigation */
  @media (max-width: 768px) {
    html {
      scroll-behavior: smooth;
    }
  }

  /* Focus styles for accessibility */
  .mobile-menu-button:focus,
  .mobile-nav-link:focus {
    outline: 2px solid #C9A227;
    outline-offset: 2px;
  }
</style>

<script is:inline>
  // Japanese Luxury Mobile Navigation - Elegant Dropdown Accordion
  (function() {
    'use strict';
    
    // Prevent multiple initializations
    if (window.takaiLuxuryNav) return;
    window.takaiLuxuryNav = true;

    let isInitialized = false;
    let isMenuOpen = false;
    let retryCount = 0;
    const maxRetries = 10;

    // Cache DOM elements
    let mobileButton, mobileNav, mobileCloseBtn, mobileLinks;

    function handleScroll() {
      const header = document.getElementById('main-header');
      if (header) {
        const scrolled = window.scrollY > 100;
        header.classList.toggle('scrolled', scrolled);
      }
    }

    // Throttled scroll handler
    let ticking = false;
    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    }

    function openMobileMenu() {
      if (!mobileNav || !mobileButton) return;
      
      isMenuOpen = true;
      
      // Update ARIA attributes
      mobileButton.setAttribute('aria-expanded', 'true');
      mobileNav.setAttribute('aria-hidden', 'false');
      
      // Add classes for elegant animations
      mobileButton.classList.add('open');
      mobileNav.classList.add('open');
      
      // Lock body scroll for focus
      document.body.style.overflow = 'hidden';
      
      // Focus management with Japanese precision
      setTimeout(() => {
        const firstLink = mobileNav.querySelector('.mobile-nav-link');
        if (firstLink) firstLink.focus();
      }, 400); // Match animation duration
    }

    function closeMobileMenu() {
      if (!mobileNav || !mobileButton) return;
      
      isMenuOpen = false;
      
      // Update ARIA attributes
      mobileButton.setAttribute('aria-expanded', 'false');
      mobileNav.setAttribute('aria-hidden', 'true');
      
      // Remove classes for smooth collapse
      mobileButton.classList.remove('open');
      mobileNav.classList.remove('open');
      
      // Restore body scroll
      document.body.style.overflow = '';
      
      // Return focus with elegance
      setTimeout(() => {
        mobileButton.focus();
      }, 100);
    }

    function toggleMobileMenu() {
      if (isMenuOpen) {
        closeMobileMenu();
      } else {
        openMobileMenu();
      }
    }

    function handleKeyDown(e) {
      if (!isMenuOpen) return;
      
      // Escape key - Japanese minimalism
      if (e.key === 'Escape') {
        e.preventDefault();
        closeMobileMenu();
        return;
      }
      
      // Tab trapping for accessibility
      if (e.key === 'Tab') {
        const focusableElements = mobileNav.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    }

    function initMobileNavigation() {
      if (isInitialized) return true;

      // Get DOM elements with precision
      mobileButton = document.getElementById('mobile-menu-button');
      mobileNav = document.getElementById('mobile-navigation');
      mobileCloseBtn = document.getElementById('mobile-menu-close');
      mobileLinks = document.querySelectorAll('.mobile-nav-link');

      // Check if essential elements exist
      if (!mobileButton || !mobileNav || !mobileCloseBtn) {
        retryCount++;
        if (retryCount < maxRetries) {
          setTimeout(initMobileNavigation, 100 * retryCount);
          return false;
        }
        console.warn('TAKAI: Mobile navigation elements not found');
        return false;
      }

      isInitialized = true;

      // Event listeners with Japanese attention to detail
      mobileButton.addEventListener('click', toggleMobileMenu);
      mobileCloseBtn.addEventListener('click', closeMobileMenu);
      
      // Handle navigation links with grace
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          // Elegant delay for smooth navigation
          setTimeout(closeMobileMenu, 100);
        });
      });

      // Keyboard event listeners
      document.addEventListener('keydown', handleKeyDown);

      // Close menu on desktop resize - responsive design
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768 && isMenuOpen) {
          closeMobileMenu();
        }
      });

      return true;
    }

    // Initialize scroll handler immediately
    window.addEventListener('scroll', onScroll, { passive: true });

    // Multiple initialization strategies for Astro reliability
    function tryInit() {
      initMobileNavigation();
    }

    // Strategy 1: Immediate if DOM ready
    if (document.readyState !== 'loading') {
      setTimeout(tryInit, 50);
    }

    // Strategy 2: DOMContentLoaded
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(tryInit, 100);
    });

    // Strategy 3: Window load (most reliable for Astro)
    window.addEventListener('load', () => {
      setTimeout(tryInit, 150);
    });

    // Strategy 4: Astro page navigation
    document.addEventListener('astro:page-load', () => {
      isInitialized = false;
      retryCount = 0;
      setTimeout(tryInit, 100);
    });

    // Strategy 5: Fallback with Japanese patience
    setTimeout(tryInit, 500);
  })();
</script>
