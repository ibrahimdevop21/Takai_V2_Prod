---
import { Icon } from "astro-icon/components";
import Logo from '~/components/Logo.astro';
import { getHomePermalink } from '~/utils/permalinks';
import { getAsset } from '~/utils/permalinks';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends Link {
  type?: string;
}

interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  position?: string;
}

const {
  links = [],
  actions = [],
  isSticky = false,
  position = 'center',
} = Astro.props;

// Calculate current path to determine active links
const currentPath = new URL(Astro.request.url).pathname;
---

<!-- Skip to main content link for accessibility -->
<a 
  href="#main-content" 
  class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-[200] focus:bg-takai-gold focus:text-black focus:px-4 focus:py-2 focus:rounded-lg focus:font-semibold focus:shadow-lg"
>
  Skip to main content
</a>

<header
  id="main-header"
  class="fixed w-full shadow-lg transition duration-300 ease-in-out z-50"
  aria-label="TAKAI Navigation"
>
  <nav 
    class="max-w-7xl mx-auto flex items-center justify-between px-4 lg:px-6 py-2.5 lg:py-3"
    role="navigation"
    aria-label="Main navigation"
  >
    <!-- TAKAI Logo -->
    <a href="/" class="flex items-center flex-shrink-0">
      <Logo class="w-28 lg:w-32 transition-transform duration-300" />
    </a>

    <!-- Centered Desktop Navigation Links -->
    <ul class="hidden md:flex flex-1 justify-center gap-4 lg:gap-6 xl:gap-8 text-white/90 font-medium text-sm lg:text-base">
      {
        links.map(({ text, href }) => {
          const isActive = currentPath === href;
          return (
            <li>
              <a 
                href={href} 
                class={`nav-link transition-colors duration-300 relative whitespace-nowrap ${
                  isActive 
                    ? 'text-white active' 
                    : 'text-white/90 hover:text-white'
                }`}
              >
                {text}
              </a>
            </li>
          )
        })
      }
    </ul>

    <!-- Find Distributor CTA Button -->
    <a
      href="/distributors"
      class="hidden md:inline-flex items-center bg-takai-gold hover:bg-takai-gold/90 text-black font-medium text-sm lg:text-base px-4 py-2 lg:px-5 lg:py-2.5 rounded-lg shadow-md transition-all duration-300 whitespace-nowrap flex-shrink-0"
    >
      Find Distributor
    </a>

    <!-- Elegant Mobile Menu Button -->
    <button 
      id="mobile-menu-button"
      class="mobile-menu-button md:hidden relative z-[110] p-3 focus:outline-none transition-all duration-300 border-2 border-transparent hover:border-[#C9A227] rounded-lg"
      aria-label="Toggle mobile navigation menu"
      aria-expanded="false"
      aria-controls="mobile-navigation"
    >
      <div class="hamburger-container w-6 h-6 flex flex-col justify-center items-center space-y-1">
        <span class="hamburger-line block w-6 h-0.5 bg-gray-100 transition-all duration-300 ease-in-out"></span>
        <span class="hamburger-line block w-6 h-0.5 bg-gray-100 transition-all duration-300 ease-in-out"></span>
        <span class="hamburger-line block w-6 h-0.5 bg-gray-100 transition-all duration-300 ease-in-out"></span>
      </div>
    </button>
  </nav>
</header>

<!-- Premium TAKAI Mobile Navigation - Outside header for proper stacking -->
<nav
  id="mobile-navigation"
  class="mobile-nav fixed top-20 left-0 right-0 z-[100] flex flex-col justify-start pt-6 px-8 md:hidden
         text-[#E5E5E5] bg-[#010f2a] border-t border-[#C9A227]
         transition-transform transition-visibility duration-300 ease-in-out
         invisible transform -translate-y-3"
  role="navigation"
  aria-label="Mobile navigation menu"
  aria-hidden="true"
>
  <!-- Navigation Links with Gold Dividers -->
  <ul class="flex flex-col divide-y divide-[#C9A227]/60 divide-solid uppercase tracking-[0.05em] font-medium">
    {
      links.map(({ text, href }, index) => {
        const isActive = currentPath === href;
        return (
          <li class="mobile-nav-item py-6 transition-all duration-300 text-center" style={`animation-delay: ${index * 50}ms`}>
            <a 
              href={href} 
              class={`mobile-nav-link block transition-all duration-300 text-lg ${
                isActive 
                  ? 'text-[#C9A227] font-bold shadow-[0_0_8px_#C9A227/40]' 
                  : 'text-[#E5E5E5] hover:text-[#C9A227]'
              }`}
              role="menuitem"
            >
              {text}
            </a>
          </li>
        );
      })
    }
  </ul>
  
  <!-- Premium Action Button -->
  <div class="mt-8 mb-6 px-4">
    <button 
      onclick="window.location.href='/distributors'"
      class="w-full bg-[#C9A227] text-[#0A0D14] py-3 px-6 rounded-lg font-bold text-lg hover:shadow-[0_0_15px_#C9A227/50] hover:scale-105 transition-all duration-300 uppercase tracking-wider border-2 border-[#C9A227]"
    >
      Find Distributor
    </button>
  </div>
</nav>

<style>
  /* Premium header with footer-matching background */
  header {
    background: linear-gradient(to right, rgba(10, 25, 48, 0.95), rgba(14, 35, 69, 0.95));
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  }
  
  header.scrolled {
    backdrop-filter: blur(10px);
    background: linear-gradient(to right, rgba(6, 17, 33, 0.95), rgba(10, 25, 48, 0.95));
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
  }
  
  /* Luxury Japanese Nav Link Styling */
  .nav-link {
    position: relative;
    font-family: 'Inter', 'Noto Sans JP', sans-serif;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -3px;
    left: 0;
    width: 0;
    height: 2px;
    background: #C9A227;
    transition: width 0.3s ease;
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }

  /* Mobile Navigation Base */
  .mobile-nav {
    visibility: hidden;
    transform: translateY(-12px);
    transition: transform 0.3s ease-in-out, visibility 0s linear 0.3s;
    background-color: #010f2a;
  }

  /* Open State */
  .mobile-nav.open {
    visibility: visible;
    transform: translateY(0);
    transition: transform 0.3s ease-in-out, visibility 0s;
    background-color: #010f2a;
  }

  /* Remove blur or transparency globally */
  #mobile-navigation,
  #mobile-navigation.open {
    background-color: #010f2a !important;
    backdrop-filter: none !important;
    background-image: none !important;
  }

  /* Mobile Navigation Items Staggered Animation */
  .mobile-nav-item {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.3s ease-out, transform 0.3s ease-out;
  }

  .mobile-nav.open .mobile-nav-item {
    opacity: 1;
    transform: translateY(0);
  }

  /* Gold separator lines for links */
  .mobile-nav ul {
    border-top: 1px solid rgba(201, 162, 39, 0.4);
  }
  .mobile-nav ul li + li {
    border-top: 1px solid rgba(201, 162, 39, 0.2);
  }

  /* Body Scroll Lock */
  body.mobile-menu-open {
    overflow: hidden;
    position: fixed;
    width: 100%;
  }

  /* Elegant Hamburger Animation */
  .mobile-menu-button.open {
    border-color: #C9A227;
  }
  
  .mobile-menu-button.open .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-menu-button.open .hamburger-line:nth-child(2) {
    opacity: 0;
    transform: scale(0);
  }

  .mobile-menu-button.open .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(5px, -5px);
  }

  /* Ensure hamburger button stays visible and functional when menu is open */
  body.mobile-menu-open .mobile-menu-button {
    z-index: 110 !important;
  }
</style>

<script is:inline>
  (function() {
    // Prevent multiple initializations
    if (window.takaiLuxuryNav) return;
    window.takaiLuxuryNav = true;

    let isInitialized = false;
    let isMenuOpen = false;
    let retryCount = 0;
    const maxRetries = 10;

    // Cache DOM elements
    let mobileButton, mobileNav, mobileLinks;

    function handleScroll() {
      const header = document.getElementById('main-header');
      if (header) {
        const scrolled = window.scrollY > 100;
        header.classList.toggle('scrolled', scrolled);
      }
    }

    // Throttled scroll handler
    function throttleScroll() {
      let ticking = false;
      return () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      }
    }

    const scrollHandler = throttleScroll();

    function tryInit() {
      // Initialize scroll handling first (independent)
      window.addEventListener('scroll', scrollHandler, { passive: true });
      handleScroll(); // Check initial scroll position
      
      // Initialize mobile navigation if not already
      if (!isInitialized) {
        initMobileNavigation();
      }
    }

    function initMobileNavigation() {
      if (isInitialized) return true;

      // Get DOM elements with precision
      mobileButton = document.getElementById('mobile-menu-button');
      mobileNav = document.getElementById('mobile-navigation');
      mobileLinks = document.querySelectorAll('.mobile-nav-link');

      // Check if essential elements exist
      if (!mobileButton || !mobileNav) {
        retryCount++;
        if (retryCount < maxRetries) {
          setTimeout(initMobileNavigation, 100 * retryCount);
          return false;
        }
        console.warn('TAKAI: Mobile navigation elements not found');
        return false;
      }

      isInitialized = true;

      // Event listeners with premium attention to detail
      mobileButton.addEventListener('click', toggleMobileMenu);
      
      // Handle navigation links with grace
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          // Elegant delay for smooth navigation
          setTimeout(closeMobileMenu, 100);
        });
      });

      // Keyboard event listeners
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isMenuOpen) {
          closeMobileMenu();
        }
      });

      // Handle resize (auto-close on desktop)
      window.addEventListener('resize', () => {
        if (isMenuOpen && window.innerWidth >= 768) {
          closeMobileMenu();
        }
      });

      return true;
    }

    function openMobileMenu() {
      if (!mobileNav || !mobileButton) return;
      
      isMenuOpen = true;
      
      // Update ARIA attributes
      mobileButton.setAttribute('aria-expanded', 'true');
      mobileNav.setAttribute('aria-hidden', 'false');
      
      // Add classes for premium animations
      mobileButton.classList.add('open');
      mobileNav.classList.add('open');
      document.body.classList.add('mobile-menu-open');
      
      // Focus management with precision
      setTimeout(() => {
        const firstLink = mobileNav.querySelector('.mobile-nav-link');
        if (firstLink) firstLink.focus();
      }, 300); // Match animation duration
    }

    function closeMobileMenu() {
      if (!mobileNav || !mobileButton) return;
      
      isMenuOpen = false;
      
      // Update ARIA attributes
      mobileButton.setAttribute('aria-expanded', 'false');
      mobileNav.setAttribute('aria-hidden', 'true');
      
      // Remove classes for smooth collapse
      mobileButton.classList.remove('open');
      mobileNav.classList.remove('open');
      document.body.classList.remove('mobile-menu-open');
      
      // Return focus with elegance
      setTimeout(() => {
        mobileButton.focus();
      }, 100);
    }

    function toggleMobileMenu() {
      if (isMenuOpen) {
        closeMobileMenu();
      } else {
        openMobileMenu();
      }
    }

    // Multi-strategy initialization (reliable across page loads and navigation)
    // Strategy 1: DOM already loaded
    if (document.readyState !== 'loading') {
      setTimeout(tryInit, 50);
    }

    // Strategy 2: DOMContentLoaded
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(tryInit, 100);
    });

    // Strategy 3: Window load (most reliable for Astro)
    window.addEventListener('load', () => {
      setTimeout(tryInit, 150);
    });

    // Strategy 4: Astro page navigation
    document.addEventListener('astro:page-load', () => {
      isInitialized = false;
      retryCount = 0;
      setTimeout(tryInit, 100);
    });

    // Strategy 5: Fallback with Japanese patience
    setTimeout(tryInit, 500);
  })();
</script>