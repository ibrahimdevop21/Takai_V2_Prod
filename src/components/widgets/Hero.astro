---
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  images = [], // Array of images for carousel

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative h-screen not-prose bg-gradient-to-br from-takai-blue via-takai-blue to-blue-900 text-white overflow-hidden flex items-center justify-center" {...id ? { id } : {}}>
  <!-- Background Image Carousel -->
  {
    (images.length > 0 || image) && (
      <div class="absolute inset-0 z-0">
        {images.length > 0 ? (
          <div class="hero-carousel absolute inset-0 w-full h-full">
            {images.map((img: any, index: number) => (
              <img
                class={`absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
                src={img.src}
                alt={img.alt || `Hero background ${index + 1}`}
                loading={index === 0 ? 'eager' : 'lazy'}
                data-carousel-item={index}
                style="z-index: 1;"
              />
            ))}
          </div>
        ) : (
          typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <img
              class="w-full h-full object-cover"
              src={(image as any).src}
              alt={(image as any).alt || 'Hero background'}
              loading="eager"
            />
          )
        )}
        <!-- Dark overlay for text readability -->
        <div class="absolute inset-0 bg-gradient-to-br from-takai-blue/70 via-takai-blue/50 to-transparent"></div>
        <div class="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent"></div>
      </div>
    )
  }
  
  <div class="absolute inset-0 pointer-events-none z-10" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative z-20 text-center max-w-4xl mx-auto px-4 sm:px-6">
    <div class="space-y-6">
        {
          tagline && (
            <p
              class="text-base text-white font-bold tracking-widest uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-7xl font-noto-serif-jp font-semibold leading-tight tracking-wider mb-6 bg-gradient-to-r from-takai-red to-takai-gold text-transparent bg-clip-text opacity-0 animate-fadeIn"
              set:html={title}
            />
          )
        }
        {
          subtitle && (
            <p
              class="text-xl md:text-2xl text-white/80 mb-6 md:mb-8 tracking-wide opacity-0 animate-fadeIn-delay"
              set:html={subtitle}
            />
          )
        }
          {
            actions && (
              <div class="flex flex-row justify-center gap-3 sm:gap-4 opacity-0 animate-fadeIn-delay">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex flex-1 max-w-[140px] sm:max-w-none sm:flex-initial">
                      <Button {...(action || {})} class={`w-full ${action.class || ''}`} />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
    </div>
    {content && <Fragment set:html={content} />}
  </div>
</section>

<script>
  // Hero image carousel functionality
  function initHeroCarousel() {
    const carousel = document.querySelector('.hero-carousel');
    if (!carousel) return;
    
    const images = carousel.querySelectorAll('[data-carousel-item]');
    if (images.length <= 1) return;
    
    let currentIndex = 0;
    
    function showNextImage() {
      // Hide current image
      images[currentIndex].classList.remove('opacity-100');
      images[currentIndex].classList.add('opacity-0');
      
      // Move to next image
      currentIndex = (currentIndex + 1) % images.length;
      
      // Show next image
      images[currentIndex].classList.remove('opacity-0');
      images[currentIndex].classList.add('opacity-100');
    }
    
    // Change image every 4 seconds
    setInterval(showNextImage, 4000);
  }
  
  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeroCarousel);
  } else {
    initHeroCarousel();
  }
</script>
